// <auto-generated />
using System;
using CloudVOffice.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudVOffice.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240122065615_MenstrualcycleCalendar")]
    partial class MenstrualcycleCalendar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyDetailsId"));

                    b.Property<string>("ABBR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDetailsId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.LetterHead", b =>
                {
                    b.Property<int>("LetterHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterHeadId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LetterHeadAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LetterHeadId");

                    b.ToTable("LetterHeads");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.Property<int>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAccountId"));

                    b.Property<string>("AlternativeEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("EmailAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultSending")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAccountId");

                    b.HasIndex("Domain");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailDomain", b =>
                {
                    b.Property<int>("EmailDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailDomainId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncomingIsIMAP")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsStartTLs")
                        .HasColumnType("bit");

                    b.Property<int>("IncomingPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutgoingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("OutgoingIsTLs")
                        .HasColumnType("bit");

                    b.Property<int>("OutgoingPort")
                        .HasColumnType("int");

                    b.Property<string>("OutingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailDomainId");

                    b.ToTable("EmailDomains");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.CyclePredictor.Expert", b =>
                {
                    b.Property<int>("ExpertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpertId"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ExpertName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mailid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpertId");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.CyclePredictor.MenstrualCycleCalendar", b =>
                {
                    b.Property<long>("MenstrualCycleCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MenstrualCycleCalendarId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenstrualCycleCalendarId");

                    b.ToTable("MenstrualCycleCalendars");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.CyclePredictor.MobileUser", b =>
                {
                    b.Property<long>("MobileUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MobileUserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MobileUserId");

                    b.ToTable("MobileUsers");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("DefaultSendingAccount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailTemplateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            EmailTemplateId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(1208),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\">\r\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">{%welcometitle%} </h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table border=\"0\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\"><span style=\"color:rgb(22,123,158); font-size:16px; margin-right:2px; font-weight:600\"></span>{%helloname%}</h5>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%accountcreatetionmessage%}</p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%loginidmessage%}</p>\r\n\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%aditionalmessage%}</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br />\r\n                                                                                {%copylinkfrommessage%}\r\n                                                                            </div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"></div> </div></span>\r\n</div>",
                            EmailTemplateName = "WelcomeEmail",
                            Subject = ""
                        },
                        new
                        {
                            EmailTemplateId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(1211),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Password Reset Request</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td class=\"\">\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\">Hello {%helloname%}</h5><div><br></div>\r\n                                                                                <p>We have received a request to reset your account password. To proceed with the password reset, please click on the link below:</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br>If you did not request a password reset, Please ignore this email. Your account will&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">remain secure, and no action is required.</span></div><div style=\"margin-left:1.2rem; margin-bottom:1em\"><span style=\"background-color: transparent; text-align: inherit;\"><p>For security reasons, this link will expire in 2 hours. If you&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">are unable to reset your password within this time frame,&nbsp;</span><span style=\"background-color: transparent; text-align: inherit;\">please request another password reset.</span></p></span></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "PasswordReset",
                            Subject = "Password Reset Request"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 10000L);

                    b.Property<int?>("ApplicationId1")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationId1");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Applications",
                            AreaName = "Application",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9984),
                            Deleted = false,
                            IconClass = "icon-th-large-outline",
                            IconImageUrl = "/appstatic/images/applications.png",
                            IsGroup = true,
                            Url = "/Application/Applications/InstalledApps"
                        },
                        new
                        {
                            ApplicationId = 2,
                            ApplicationName = "Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9989),
                            Deleted = false,
                            IconClass = "icon-cogs",
                            IconImageUrl = "/appstatic/images/setup.png",
                            IsGroup = true,
                            Url = "/Setup/Setup/Dashboard"
                        },
                        new
                        {
                            ApplicationId = 3,
                            ApplicationName = "Company Settings",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9992),
                            Deleted = false,
                            IconClass = "icon-office",
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 4,
                            ApplicationName = "Company",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9994),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/CompanyDetails/CompanyDetailsView"
                        },
                        new
                        {
                            ApplicationId = 5,
                            ApplicationName = "Letter Head",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9996),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/LetterHead/LetterHeadView"
                        },
                        new
                        {
                            ApplicationId = 6,
                            ApplicationName = "User",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(9998),
                            Deleted = false,
                            IconClass = "icon-users",
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 7,
                            ApplicationName = "User List",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 6,
                            Url = "/Setup/User/UserList"
                        },
                        new
                        {
                            ApplicationId = 8,
                            ApplicationName = "Email Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(2),
                            Deleted = false,
                            IconClass = "icon-envelop",
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 9,
                            ApplicationName = "Domain",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(4),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailDomain/EmailDomainView"
                        },
                        new
                        {
                            ApplicationId = 10,
                            ApplicationName = "Email Account",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(6),
                            Deleted = false,
                            IsGroup = true,
                            Parent = 8,
                            Url = "/Setup/EmailAccount/EmailAccountView"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.InstalledApplication", b =>
                {
                    b.Property<int>("InstalledApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstalledApplicationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("InstalledApplicationId");

                    b.ToTable("InstalledApplications");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.Property<long>("RoleAndApplicationWisePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleAndApplicationWisePermissionId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleAndApplicationWisePermissionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAndApplicationWisePermissions");

                    b.HasData(
                        new
                        {
                            RoleAndApplicationWisePermissionId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(498),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(501),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(503),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(504),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(506),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(538),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(540),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(541),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(543),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(544),
                            Deleted = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.Property<long>("UserWiseViewMapperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserWiseViewMapperId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserWiseViewMapperId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWiseViewMappers");

                    b.HasData(
                        new
                        {
                            UserWiseViewMapperId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(982),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(985),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(987),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(988),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(990),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(992),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(994),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(995),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(998),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 958, DateTimeKind.Local).AddTicks(1000),
                            Deleted = false,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.RefreshToken", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefreshTokenId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(4544),
                            Deleted = false,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpirey")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 1, 22, 12, 26, 14, 957, DateTimeKind.Local).AddTicks(8858),
                            Deleted = false,
                            Email = "admin@appman.in",
                            FirstName = "Administrator",
                            IsActive = true,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "",
                            Password = "r9NmU79/NE0x0el2cuI8PeI4GlVCdpOeB875sWPUeJw=",
                            PhoneNo = "9583000000",
                            UserType = 1,
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.Property<int>("UserRoleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleMappingId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleMappingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings");

                    b.HasData(
                        new
                        {
                            UserRoleMappingId = 1,
                            RoleId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Comunication.EmailDomain", "EmailDomain")
                        .WithMany()
                        .HasForeignKey("Domain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDomain");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", null)
                        .WithMany("Children")
                        .HasForeignKey("ApplicationId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("RoleAndModuleWisePermission")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("RoleAndApplicationWisePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleAndModuleWisePermission");

                    b.Navigation("UserWiseViewMapper");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Navigation("RoleAndApplicationWisePermission");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoleMappings");

                    b.Navigation("UserWiseViewMapper");
                });
#pragma warning restore 612, 618
        }
    }
}
